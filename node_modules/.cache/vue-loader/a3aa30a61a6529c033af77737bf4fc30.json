{"remainingRequest":"/home/runner/work/U3_Investigacion_Operaciones/U3_Investigacion_Operaciones/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/U3_Investigacion_Operaciones/U3_Investigacion_Operaciones/src/views/curso/Tema2.vue?vue&type=template&id=5b48708c&lang=pug&","dependencies":[{"path":"/home/runner/work/U3_Investigacion_Operaciones/U3_Investigacion_Operaciones/src/views/curso/Tema2.vue","mtime":1745295938793},{"path":"/home/runner/work/U3_Investigacion_Operaciones/U3_Investigacion_Operaciones/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U3_Investigacion_Operaciones/U3_Investigacion_Operaciones/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/runner/work/U3_Investigacion_Operaciones/U3_Investigacion_Operaciones/node_modules/pug-plain-loader/index.js","mtime":499162500000},{"path":"/home/runner/work/U3_Investigacion_Operaciones/U3_Investigacion_Operaciones/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U3_Investigacion_Operaciones/U3_Investigacion_Operaciones/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}